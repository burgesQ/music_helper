#!/usr/bin/env bash

: '
TODO :
- 2 log file : ok.log/error.log ?
'

: '
 Possible return value from the scirpt are :
 - 0 : all ok
 - 1 : cli opt
 - 2 : required package are not present
 - 3 : invalid path provided
 - 4 : dl while sync
 - 5 : dl while dl
'

# fetch script path for import
# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

# import libs
source sh_lib
if [ $? -ne 0 ]; then
    source $SCRIPTPATH/sh_lib/sh_lib
fi

CFG_PATH=$HOME/.config/sosound

# static value
LOG_PATH=$CFG_PATH/logs/dl/
LOCK_DIR=$CFG_PATH/lock/dl/
SYNC_LOCK_DIR=$CFG_PATH/lock/sync/

# default cli value
YT_CONF_PATH=$CFG_PATH/youtube-dl.conf
DL_CONF_PATH=$CFG_PATH/dl.conf
DL_PATH=$HOME/Music/

YT_UPT=$CFG_PATH/.yt_updated

# array of workers pids
WORKERS=()

#
# var for usage / debug
#

#
# var setted by the cli // default value
#

DL_MODE=0
INSTALL=0
OUTPUT_MODE=0
SHOW=0
NEW_TARGET=
ENTRY=
URL=""

RUNNING_INFO="
    download path :          $DL_PATH
    download config file :   $DL_CONF_PATH
    youtube-dl config file : $YT_CONF_PATH

    log path :               $LOG_PATH
    lock directory path :    $LOCK_DIR

    dl mode :                $DL_MODE (0=all,1=youtube,2=soundcloud,3=disable_dl)
    output mode :            $OUTPUT_MODE (0=logfile,1=std)
    loglevel :               $LEVEL (0=error,1=info,2=warn,3=debug)

    new target :             $NEW_TARGET
    show url :               $SHOW
    comment entry :          $TO_COMMENT
"

USAGE="
Usage : $0 -d [path] -c [path] -y [path] -m [0..3] -s -n -a [Entry URL] -r [Entry] -l [0..3] -o [1..2] -i -h

Run $0, a simple music downloader script.

Download configuration options :

    -d:     Directory root path for downloads. A full or relative path can be provide.
            Default : [$DL_PATH]
    -c:     Configuration file for the download. A full path must be provide.
            Default : [$DL_CONF_PATH]
    -y:     Youtube-dl configuration file path. A full path must be provide.
            Default : [$YT_CONF_PATH]
    -m:     Mode (0=all,1=youtube,2=soundcloud,3=disable_dl)
            Default : [$DL_MODE]

Configuration options :

    -s:     Show the entry in the config file
    -a:     Append entry to the config file.
            Argument must be in format [EntryDirectory EntryURL]
    -r:     Comment/Uncomment a entry from the config file.
            Argument must be in format [EntryDirectory]

Misc options :
    -l:     log level (0=error,1=info,2=warn,3=debug).
            Default : [$LEVEL]
    -o:     Output mode. (0=logfile,1=std)
    -i:     install required packages
    -h:     display this screen
    -n:     diable the color output
"

#
# Misc
#

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

# trap SIGTERM as it's the signal send by docker
trap ctrl_c SIGTERM

# handle ^+c
function ctrl_c() {
    info "\n\n** Trapped CTRL-C"
    info "killing child..."
    pkill youtube-dl
    pkill scdl # killing scdl twice as the process successively launch it 2 times
    sleep 0.1
    pkill scdl
    for entry in "${WORKERS[@]}"; do # kill remaining workers
        kill $entry &> /dev/null
    done
    sleep 1
    info "[-] removing lock files"
    rm -rf $LOCK_DIR/*

    exit 0
}

# install youtube-dl
install_yt() {
    exit_if_not_installed "curl"
    sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
    sudo chmod a+rx /usr/local/bin/youtube-dl
    info "youtube-dl (a youtube dowmloader) installed"
}

#
# Guess functions
#

# define if the url has to be dl via scdl
is_soundcloud() {
    local url=$1
    if [ `echo $url | grep "soundcloud"` ] &&
           ( [ $DL_MODE -eq 0 ] || [ $DL_MODE -eq 2 ] ); then
        echo 1
    else
        echo 0
    fi
}

# define if the url has to be dl via youtube-dl
is_youtube() {
    local url=$1
    if [ `echo $url | grep "youtube"` ] &&
           ( [ $DL_MODE -eq 0 ] || [ $DL_MODE -eq 1 ] ); then
        echo 1
    else
        echo 0
    fi
}

#
# DL function
#

# download (playlist/track) from youtube
download_from_yt() {
    local url=$1
    # add version at the beginning of the log file ?
    youtube-dl --verbose --config-location $YT_CONF_PATH $url
    echo $?
}

# download playlists from soundcloud
download_from_sc_playlist() {
        local url=$1
        scdl -l "$url" -p -c --hide-progress --download-archive .scdl_playlist.txt
        echo $?
    }

# download likes from soundcloud
download_from_sc_like() {
        local url=$1
        scdl -l "$url" -f -c --hide-progress --download-archive .scdl_like.txt
        echo $?
}

#
# Handler function
#

# handle the log logic / running of youtube-dl
handle_youtube() {
    path=$1
    url=$2
    local ret
    local log_file="$LOG_PATH$(basename $path)"

    if [ $OUTPUT_MODE -eq 0 ]; then
        (echo -e "youtube-dl : $path\n" ; download_from_yt "$url") &> "$log_file".log
        ret=`cat $log_file.log | tail -n 1`
    else
        ret=`download_from_yt "$url"`
    fi

    if [ "$ret" != "0" ]; then
        error "Error while downloading $path - please check the logs"
    fi
}

# handle the log logic / running of scdl
handle_soundcloud() {
    path=$1
    url=$2
    local log_file="$LOG_PATH$(basename $path)"

    if [ $OUTPUT_MODE -eq 0 ]; then
        (echo -e "scld : $path\n" ; download_from_sc_like "$url") &> "$log_file"_like.log
        (echo -e "scdl : $path\n" ; download_from_sc_playlist "$url") &> "$log_file"_playlist.log
    else
        download_from_sc_like "$url" ; download_from_sc_playlist "$url"
    fi
}

#
# Global function
#

check_new_file() {
    local watch_path="$1"
    local lock_file="$2"
    local log_file="$LOG_PATH$(basename $watch_path)"

    debug "Watching for new file in $watch_path"
    inotifywait -m "$watch_path" -e create -e moved_to -e delete --format "%T: %f has been %e (%w)" --timefmt "%H:%M:%S" --excludei "\.(temp|part|webm|m4a|jpg)(\.mp3)?" |
        while read l ; do
            debug " + $l"
        done
}

# Process the argument; create the dl dir;
downloader() {
    local path=$1
    local url=$2
    local dl_path=$DL_PATH$path
    # use of basename in case of [dir/subdir]
    local lock_file="$LOCK_DIR$(basename $path).lock"

    touch $lock_file
    info "Downloading $path stuffs : running ..."

    mkdir -p "$dl_path"
    touch "$dl_path/.downloaded"
    pre_cout=`ls -l $dl_path | wc -l`

    cd "$dl_path"
    check_new_file "$dl_path" "$lock_file" &
    local last_pid=$!
    WORKERS+=("$last_pid")

    if [ `is_soundcloud "$url"` == "1" ] ; then
        handle_youtube $path "$url"
#         handle_youtube $path "$url"
    elif [ `is_youtube "$url"` == "1" ]; then
        handle_youtube $path "$url"
    elif [ $DL_MODE -eq 3 ]; then
        debug "($$) sleeping 5 seconds"
        sleep 5 # sleep 10 for test
    else
        warn "url schema not supported (mode=$DL_MODE) : $url"
    fi
    cd - > /dev/null

    post_cout=`ls -l $dl_path | wc -l`

    info "[$path : done | pre : $pre_cout -- post : $post_cout]"

    rm $lock_file
}

#
# Wait for all download to be complete.
# All download are complete once the $LOCK_DIR/  directory is empty
#
wait_for_download() {
    info "Waiting for downlaod to finish"
    while true
    do
        if ! (find $LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .); then
            break
        fi
        sleep 5
    done
}

# process entry
handle_dl() {
    local entry=$1
    local path=`echo "$entry" | cut -d ' ' -f1`
    local url=`echo "$entry" | cut -d ' ' -f2`

    debug "Processing $path"

    if [ "$URL" != "" ]; then
       path="dl"
       url=$URL
    fi

    if [ -z "$url" ] || [ -z "$path" ]; then
        error "Invalid value in the download configuration file for ($path):[$url]"
        warn "Skipping"
    else
        downloader $path $url &
        local last_pid=$!
        WORKERS+=("$last_pid")
    fi
}

#
# Read the download configuration file ;
# run the download if needed and then wait
# for all worker to finish
#
run() {
    info "Downloading music files : running ..."
    start=`date +%s`
    # make newlines the only separator
    local IFS=$'\n'

    if [ "$URL" != "" ]; then
        handle_dl "$f"
    fi

    while read f ; do
        if [ $SHOW -eq 1 ]; then
            pretty_print_entry "$f"
        elif [[ ! "$f" =~ ^#.* ]]; then
            handle_dl "$f"
        fi
        sleep 0.1
    done < <(cat $DL_CONF_PATH)

    sleep 0.5 && wait_for_download
    end=`date +%s`

    info "Downloading music files : done ($((end-start))s)"
}

#
# Conf file functions
#

# list entry in conf file
pretty_print_entry() {
    local path=`echo "$1" | cut -d ' ' -f1`
    local url=`echo "$1" | cut -d ' ' -f2`
    local ignored="false"

    if [ "$path" == "#" ]; then
        ignored="true"
        path=$url
        url=`echo "$1" | cut -d ' ' -f3`
    fi

    info "Target: $path -- Source: $url (ingored: $ignored)"
}

# comment or uncommnent a target entry
change_state_target() {
    local uncomment=`grep "^# $ENTRY" "$DL_CONF_PATH"`
    local comment=`grep "^$ENTRY" "$DL_CONF_PATH"`

    if [ -z "$comment" ] && [ -z "$uncomment" ]; then
        error "No entry $target found - please double check the command line"
    elif [ -z "$comment" ]; then
        local uncomment="s/^# $ENTRY/$ENTRY/g"
        sed -i -e "$uncomment" $DL_CONF_PATH
        info "Entry $ENTRY uncommented"
    else
        local comment="s/^$ENTRY/# $ENTRY/g"
        sed -i -e "$comment" $DL_CONF_PATH
        info "Entry $ENTRY commented"
    fi
}

# list the target in the conf file
show_them_all() {
    # make newlines the only separator
    local IFS=$'\n'

    while read f ; do
        pretty_print_entry "$f"
    done < <(cat $DL_CONF_PATH)
}

#
# Setup functions
#

# check if no other dl/sync process are running
check_running() {
    if [ "`find $SYNC_LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .`" == "1"  ]; then
        error "Cannot dl while syncing"
        exit 4
    elif [ "`ls -l $LOCK_DIR/ | wc -l`" != "1" ]; then
        error "A dl process is already running"
        exit 5
    fi
}

#
# Perform some check relative to the binaries
# and the path used into the script
#
setup() {
    info "Running a few checks ..."

    check_running

    debug "$RUNNING_INFO"

    prgs=('youtube-dl' 'ffmpeg')
    for prg in "${prgs[@]}"
    do
        exit_if_not_installed $prg
    done

    # TODO: check range mode
    # TODO: check range loglevel

    check_if_dir_exist "$DL_PATH" "download root path"
    check_if_file_exist "$YT_CONF_PATH" "youtube-dl configuration file"
    check_if_file_exist "$DL_CONF_PATH" "download configuration file"

    if [ ! -f $YT_UPT ] || [ `find "$YT_UPT" -mmin +1140` ]; then
        info "updating youtube-dl ..."
        sudo youtube-dl --update
        rm -f $YT_UPT && touch $YT_UPT
    fi

    mkdir -p $LOCK_DIR
    mkdir -p $LOG_PATH
}

pre() {
    if [ $INSTALL -eq 1 ]; then
        install_scdl && install_yt # && install_ffmpeg
        exit 0
    fi

    if [ ! -z "$NEW_TARGET" ]; then
        check_if_file_exist "$DL_CONF_PATH" "download configuration file"
        echo -e "$NEW_TARGET" >> $DL_CONF_PATH
        exit 0
    fi

    if [ ! -z "$ENTRY" ]; then
        check_if_file_exist "$DL_CONF_PATH" "download configuration file"
        change_state_target
        exit 0
    fi

    if [ $SHOW -eq 1 ]; then
        show_them_all
        exit 0
    fi
}

#
# main
#

while getopts "l:a:m:d:c:y:o:r:u:insh" o; do
    case "${o}" in
        d)
            DL_PATH=${OPTARG}
            ;;
        c)
            DL_CONF_PATH=${OPTARG}
            ;;
        y)
            YT_CONF_PATH=${OPTARG}
            ;;
        m)
            DL_MODE=${OPTARG}
            ;;
        s)
            SHOW=1
            ;;
        a)
            NEW_TARGET=${OPTARG}
            ;;
        r)
            ENTRY=${OPTARG}
            ;;
        l)
            LEVEL=${OPTARG}
            ;;
        o)
            OUTPUT_MODE=${OPTARG}
            ;;
        i)
            INSTALL=1
            ;;
        n)
            COLOR=1
            ;;
        u)
            URL=${OPTARG}
            ;;
        h)
            usage "$USAGE"
            exit 0
            ;;
        *)
            usage "$USAGE"
            exit 1
            ;;
    esac
done

pre && setup && run
