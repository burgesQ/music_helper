#!/bin/bash

# possible return value from the scirpt are :
# 0 : all ok
# 1 : cli opt
# 2 : required package are not present
# 3 : invalid path provided
# 4 : sync while dl
# 5 : sync while sync
# 6 : invalid ip
# 7 :

# fetch script path for import
# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

source sh_lib
if [ $? -ne 0 ]; then
    source $SCRIPTPATH/sh_lib/sh_lib
fi

CFG_PATH=$HOME/.config/music_helper

# static value
LOG_PATH=$CFG_PATH/logs/sync/
LOCK_DIR=$CFG_PATH/lock/sync/
DL_LOCK_DIR=$CFG_PATH/lock/dl/

# cli value
SYNC_CONF_PATH=$CFG_PATH/sync.conf
SRC_PATH=$HOME/Music/
TARGET_PATH=/sdcard/Music/
CONNECT_IP=0.0.0.0

INSTALL=0

# TODO: usage use \n \t and stuffs
USAGE="
Usage : sync -d [path] -s [path] -c [IP] -l [0..3] -i -h

Run sync, a simple android sync script.

Configuration options :

    -d:     root path for root sync path. A full or relative path can be provide.
            Default : [$SRC_PATH]
    -c:     connect ip of the android device. Please be sure that the device support
            adb over tcpip.
            Default : [$CONNECT_IP]
    -s:     sync configuration file path. A full path must be provide.
            Default : [$SYNC_CONF_PATH]

Misc options :

    -l:     log level (0=error,1=info,2=warn,3=debug).
            Default : [$LEVEL]
    -i:     install required packages
    -h:     display this screen
"

# TODO: install adb-sync

#
# Sync a directory sourced from the config file
# with the one from the remote android device.
#
sync_dir() {
    local dir=$1

    local racine=`basename $dir`
    local path="$SRC_PATH/$dir"
    local log_file="$LOG_PATH$racine.log"
    local lock_file="$LOCK_DIR$racine.lock"


    touch $lock_file && touch $log_file
    # sleep cause adb-sync is in some way block the process
    sleep 2
    adb-sync -n "$path" "$TARGET_PATH" &> $log_file
    echo -ne "\e[93m[Sync of $dir : done]\e[0m" && rm $lock_file
}

#
# Wait for all download to be complete.
# All download are complete once the $LOCK_DIR/
# directory is empty.
#
wait_for_sync() {
    info "Waiting for sync to finish"
    while true
    do
        if ! (find $LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .); then
            break
        fi
        # TODO: some recap of removed files ?
        echo -n "."
        sleep 5
    done
}

WORKERS=()

#
# Read the configuration file to extract
# directories to sync on the remote android device.
#
run() {
    info "Syncing file with the android device : running ..."

    # make newlines the only separator
    local IFS=$'\n'

    while read f ; do
        if [[ "$f" =~ ^#.* ]]; then
            warn "$f : Entry ignored"
        elif [[ ! -z "$f" ]]; then
            debug "Syncing $f ..."
            sync_dir $f &
            local last_pid=$!
            WORKERS+=("$last_pid")
        fi
        sleep 0.1
    done < <(cat $SYNC_CONF_PATH)

    sleep 0.5 && wait_for_sync

    info "\nSyncing file with the android device : done."
}

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

# handle ^+c
function ctrl_c() {
    info "\n\n** Trapped CTRL-C"
    info "killing child..."
    pkill adb-sync
    sleep 0.1
    for entry in "${WORKERS[@]}"; do # kill remaining workers
        kill $entry &> /dev/null
    done
    sleep 1
    info "\n[-] removing remaning lock files"
    ls $LOCK_DIR/
    rm -rf $LOCK_DIR/*
    exit 0
}

#
# Connect to the given android device
# via adb tcpip.
#
connect() {
    info "connecting to the android device"

    adb connect "$CONNECT_IP"
    ok=`adb devices | grep "$CONNECT_IP"`
    if [ -z "$ok" ]; then
        error "can't run adb connect [$CONNECT_IP], are you sure that you are in tcpip mode ?"
        exit 6
    fi

    debug "adb-sync connected"
}

install_adb-sync() {

}

#
# Perform some check relative to the binaries
# and the path used into the script
#
setup() {
    info "Running a few checks ..."

    debug "
    download path :          $DL_PATH
    target root path :       $TARGET_PATH
    log path :               $LOG_PATH
    lock path :              $LOCK_DIR
    sync config file :       $SYNC_CONF_PATH
    connect ip address :     $CONNECT_IP
    loglevel :               $LEVEL
"

    prgs=('adb-sync')
    for prg in "${prgs[@]}"
    do
        exit_if_not_installed $prg
    done

    if [ -z "$CONNECT_IP" ]; then
        error "Invalid ip address"
        exit 5
    fi

    check_if_dir_exist "$SRC_PATH" "download root path"
    check_if_file_exist "$SYNC_CONF_PATH" "sync configuration file"

    if (find $DL_LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .); then
        error "Cannot sync while downloading"
        exit 4
    elif (find $LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .); then
        error "A sync process is already running"
        exit 5
    fi

    mkdir -p $LOCK_DIR
    mkdir -p $LOG_PATH
    info "All okay let's process !"
}



#
# main
#

while getopts "l:c:d:inh" o; do
    case "${o}" in
        l)
            LEVEL=${OPTARG}
            ;;
        c)
            CONNECT_IP=${OPTARG} # TODO doc
            ;;
        d)
            SRC_PATH=${OPTARG}
            ;;
        i)
            INSTALL=1
            ;;
        n)
            COLOR=1
            ;;
        h)
            usage "$USAGE"
            exit 0
            ;;
        *)
            usage "$USAGE"
            exit 1
            ;;
    esac
done

if [ $INSTALL -eq 1 ]; then
    install_adb-sync
    exit 0
fi

setup && connect && run
