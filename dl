#!/bin/bash

# possible return value from the scirpt are :
# 0 : all ok ; 1 : cli opt ; 2 : required package are not present ; 3 : invalid path provided

# fetch script path for import
# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

source $SCRIPTPATH/libs/sh_lib

USAGE="
usage : ./dl -l <0..3> -d /download/path -c /config/path -y /youtube/conf/path -i -h

    -l : log level (0=error,1=info,2=warn,3=debug). Default to 2
    -d : root path for downloads
    -c : download configuration file path
    -y : youtube-dl configuration file pathch
    -i : install required packages
    -h : display this screen
"

# static value
COOKIE_PATH=$SCRIPTPATH/etc/cookies.txt
LOG_PATH=$SCRIPTPATH/etc/logs/
LOCK_DIR=/tmp/music_dl/

# cli value
YT_CONF_PATH=$SCRIPTPATH/etc/youtube-dl.conf
DL_CONF_PATH=$SCRIPTPATH/etc/dl.conf
DL_PATH=$SCRIPTPATH/Music/
YT_DL_ARGS="--config-location $YT_CONF_PATH --cookies $COOKIE_PATH"
INSTALL=0

#
# Soundcloud functions
#

# install scdl if needed
install_scdl() {
    exit_if_not_installed "pip3"
    pip3 install scdl
    info "scdl (a soundcloud downloader) installed"
}

# download playlists from soundcloud
download_from_sc_playlist() {
    local url=$1
    warn "Downloading playlist from soundcloud ..."
    scdl -l "$url" -p -c --debug --download-archive .scdl_playlist.txt;
}

# download likes from soundcloud
download_from_sc_like() {
    local url=$1
    warn "Downloading playlist from soundcloud .. "
    scdl -l "$url" -f -c --debug --download-archive .scdl_like.txt;
}

#
# YouTube functions
#

# install youtube-dl
install_yt() {
    exit_if_not_installed "curl"
    sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
    sudo chmod a+rx /usr/local/bin/youtube-dl
    info "youtube-dl (a youtube dowmloader) installed"
}

# download (playlist/track) from youtube
download_from_yt() {
    local url=$1
    # add dl archive per file
    youtube-dl $YT_DL_ARGS "$url"
}

#
# Global function
#

#
# Process the argument; create the dl dir;
# handle the log / flag file; run the dl
#
downloader() {

    local path=$1
    local url=$2

    local dl_path=$DL_PATH$path
    local log_file=$LOG_PATH$path.log

    touch $LOCK_DIR$path
    debug "Downloading $path stuffs : running ..."

    echo "$dl_path"
    echo "$log_file"

    create_dir_if_not "$dl_path"

    cd "$dl_path"
    if [ `echo $url | grep "youtube"` ]; then
        # send to yt
        pwd
        sleep 10
    elif [ `echo $url | grep "soundcloud"` ]; then
        pwd
        sleep 10
        # send to sc
    else
        warn "url schema not supported : $url"
    fi

    cd -

    debug "Downloading $path stuffs : done."
    rm $LOCK_DIR/$path
}

#
# Main logic function (checking - running - waiting)
#

#
# Wait for all download to be complete.
# All download are complete once the $LOCK_DIR/
# directory is empty
#
wait_for_download() {
    info "Waiting for downlaod to finish"
    while true
    do
        if ! (find $LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .); then
            break
        fi
        echo -n "."
        sleep 3
    done
}

#
# Read the download configuration file ;
# run the download if needed and then wait
# for all worker to finish
#
run() {
    info "Downloading music files : running ..."

    # make newlines the only separator
    local IFS=$'\n'

    while read f ; do
        debug "Processing $f"

        local path=`echo "$f" | cut -d ' ' -f1`
        local url=`echo "$f" | cut -d ' ' -f2`

        if [ -z "$url" ] || [ -z "$path" ]; then
            error "Invalid value in the download configuration file for ($path):[$url]"
            warn "Skipping"
        else
            downloader $path $url &
        fi
    done < <(cat $DL_CONF_PATH)

    sleep 1 && wait_for_download

    info "Downloading music files : done."
}

#
# Perform some check relative to the binaries
# and the path used into the script
#
setup() {
    info "Running a few checks ..."

    debug "
    download path :          $DL_PATH
    log path :               $LOG_PATH
    download config file :   $DL_CONF_PATH
    youtube-dl config file : $YT_CONF_PATH
"

    prgs=('scdl' 'youtube-dl' 'ffmpeg')
    for prg in "${prgs[@]}"
    do
        exit_if_not_installed $prg
    done

    check_if_dir_exist "$DL_PATH" "download root path"
    check_if_file_exist "$YT_CONF_PATH" "youtube-dl configuration file"
    check_if_file_exist "$DL_CONF_PATH" "download configuration file"

    create_dir_if_not $LOCK_DIR

    info "All okay let's process !"
}

#
# main
#

while getopts "l:d:c:y:ih" o; do
    case "${o}" in
        l)
            LEVEL=${OPTARG}
	          ;;
        d)
            DL_PATH=${OPTARG}
            ;;
        c)
            DL_CONF_PATH=${OPTARG}
            ;;
        y)
            YT_CONF_PATH=${OPTARG}
            ;;
        i)
            INSTALL=1
            ;;
	      h)
	          usage "$USAGE"
            exit 0
	          ;;
	      *)
	          usage "$USAGE"
	          exit 1
	          ;;
    esac
done

if [ $INSTALL -eq 1 ]; then
    install_scdl && install_yt # ffmpeg
    exit 0
fi

YT_DL_ARGS="--config-location $YT_CONF_PATH --cookies $COOKIE_PATH"

setup && run
