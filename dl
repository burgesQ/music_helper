#!/bin/bash

: '
TODO :
- check return value from log file ?
- 2 log file : ok.log/error.log ?
- ctrl+c kill all child + rm lock files
'

: '
 Possible return value from the scirpt are :
 - 0 : all ok
 - 1 : cli opt
 - 2 : required package are not present
 - 3 : invalid path provided
 - 4 : dl while sync
'

# fetch script path for import
# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
source $SCRIPTPATH/libs/sh_lib

# static value
LOG_PATH=$SCRIPTPATH/etc/logs/dl/
LOCK_DIR=$SCRIPTPATH/etc/lock/dl/
SYNC_LOCK_DIR=$SCRIPTPATH/etc/lock/sync/

# cli value
YT_CONF_PATH=$SCRIPTPATH/etc/youtube-dl.conf
DL_CONF_PATH=$SCRIPTPATH/etc/dl.conf
DL_PATH=$SCRIPTPATH/Music/
INSTALL=0
DL_MODE=0
OUTPUT_MODE=0
SHOW=0
NEW_TARGET=

USAGE="
Usage : dl -d [path] -c [path] -y [path] -m [0..3] -l [0..3] -o [1..2] -a [\"NameOfTheTarget  http://url.to/download\"] -i -h -s

Run dl, a simple music downloader script.

Configuration options :

    -d:     Directory root path for downloads. A full or relative path can be provide.
            Default : [$DL_PATH]
    -c:     Configuration file for the download. A full path must be provide.
            Default : [$DL_CONF_PATH]
    -y:     Youtube-dl configuration file path. A full path must be provide.
            Default : [$YT_CONF_PATH]
    -m:     Mode (0=all,1=youtube,2=soundcloud,3=disable_dl)
            Default : [$DL_MODE]
    -a:     Append url to the dl.conf file. Format is \"NameOfTheTarget http://url.to/download\"
    -s:     Show url listed in the dl.conf file

Misc options :

    -l:     log level (0=error,1=info,2=warn,3=debug).
            Default : [$LEVEL]
    -o:     Output mode. (0=logfile,1=std)
    -i:     install required packages
    -h:     display this screen
"

#
# Misc
#

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

# handle ^+c
function ctrl_c() {
    info "** Trapped CTRL-C"
    info "killing child..."
    debug "[-] scdl"
    (killall scdl ; sleep 1) &> /dev/null
    debug "[-] youtube-dl"
    (killall youtube-dl ; sleep 1) &> /dev/null
    debug "removing lock files"
    rm -rf "$LOCK_DIR*"
    exit 0
}

# install scdl if needed
install_scdl() {
    exit_if_not_installed "pip3"
    pip3 install scdl
    info "scdl (a soundcloud downloader) installed"
}

# install youtube-dl
install_yt() {
    exit_if_not_installed "curl"
    sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
    sudo chmod a+rx /usr/local/bin/youtube-dl
    info "youtube-dl (a youtube dowmloader) installed"
}

#
# Soundcloud functions
#

# download playlists from soundcloud
download_from_sc_playlist() {
    local url=$1
    scdl -l "$url" -p -c --hide-progress --download-archive .scdl_playlist.txt
    echo $?
}

# download likes from soundcloud
download_from_sc_like() {
    local url=$1
    scdl -l "$url" -f -c --hide-progress --download-archive .scdl_like.txt
    echo $?
}

# define if the url has to be dl via scdl
is_soundcloud() {
    local url=$1
    if [ `echo $url | grep "soundcloud"` ] &&
           ( [ $DL_MODE -eq 0 ] || [ $DL_MODE -eq 2 ] ); then
        echo 1
    else
        echo 0
    fi
}

# handle the log logic / running of scdl
handle_soundcloud() {
    path=$1
    url=$2
    local log_file="$LOG_PATH$(basename $path)"

    if [ $OUTPUT_MODE -eq 0 ]; then
        (echo -e "scld : $path\n" ; download_from_sc_like "$url") &> "$log_file"_like.log
        (echo -e "scdl : $path\n" ; download_from_sc_playlist "$url") &> "$log_file"_playlist.log
    else
        download_from_sc_like "$url" ; download_from_sc_playlist "$url"
    fi
}

#
# YouTube function
#

# download (playlist/track) from youtube
download_from_yt() {
    local url=$1
    # add version at the beginning of the log file ?
    youtube-dl --verbose --config-location $YT_CONF_PATH $url
    echo $?
}

# define if the url has to be dl via youtube-dl
is_youtube() {
    local url=$1
    if [ `echo $url | grep "youtube"` ] &&
           ( [ $DL_MODE -eq 0 ] || [ $DL_MODE -eq 1 ] ); then
        echo 1
    else
        echo 0
    fi
}

# handle the log logic / running of youtube-dl
handle_youtube() {
    path=$1
    url=$2
    local ret
    local log_file="$LOG_PATH$(basename $path)"

    if [ $OUTPUT_MODE -eq 0 ]; then
        (echo -e "youtube-dl : $path\n" ; download_from_yt "$url") &> "$log_file".log
        ret=`cat $log_file.log | tail -n 1`
    else
        ret=`download_from_yt "$url"`
    fi

    if [ "$ret" != "0" ]; then
        error "Error while downloading $path - please check the logs"
    fi
}

#
# Global function
#

# Process the argument; create the dl dir;
downloader() {
    local path=$1
    local url=$2
    local dl_path=$DL_PATH$path
    # use of basename in case of [dir/subdir]
    local lock_file="$LOCK_DIR$(basename $path).lock"

    touch $lock_file
    info "Downloading $path stuffs : running ..."

    mkdir -p "$dl_path"
    touch "$dl_path/.downloaded"
    pre_cout=`ls -l $dl_path | wc -l`

    cd "$dl_path"
    if [ `is_soundcloud "$url"` == "1" ] ; then
        handle_soundcloud $path "$url"
    elif [ `is_youtube "$url"` == "1" ]; then
        handle_youtube $path "$url"
    elif [ $DL_MODE -eq 3 ]; then
        sleep 5 # sleep 10 for test
    else
        warn "url schema not supported (mode=$DL_MODE) : $url"
    fi
    cd - > /dev/null

    post_cout=`ls -l $dl_path | wc -l`
    echo -ne "\e[93m[$path : done | pre : $pre_cout -- post : $post_cout]\e[0m"
    rm $lock_file
}

: '
 Wait for all download to be complete.
 All download are complete once the $LOCK_DIR/  directory is empty
'
wait_for_download() {
    info "Waiting for downlaod to finish"
    while true
    do
        if ! (find $LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .); then
            break
        fi
        if [ $OUTPUT_MODE -eq 0 ]; then
            echo -n "."
        fi
        sleep 5
    done
}

# helpful for debug
pretty_print_entry() {
    local path=`echo "$1" | cut -d ' ' -f1`
    local url=`echo "$1" | cut -d ' ' -f2`

    if [ "$path" == "#" ]; then
        path=$url
        url=`echo "$1" | cut -d ' ' -f3`
    fi

    info "Target: $path -- Source: $url"
}

# process entry
handle_dl() {
    local entry=$1
    local path=`echo "$entry" | cut -d ' ' -f1`
    local url=`echo "$entry" | cut -d ' ' -f2`

    debug "Processing $path"

    if [ -z "$url" ] || [ -z "$path" ]; then
        error "Invalid value in the download configuration file for ($path):[$url]"
        warn "Skipping"
    else
        downloader $path $url &
    fi
}

#
# Read the download configuration file ;
# run the download if needed and then wait
# for all worker to finish
#
run() {
    info "Downloading music files : running ..."

    # make newlines the only separator
    local IFS=$'\n'

    while read f ; do
        if [ $SHOW -eq 1 ]; then
            pretty_print_entry "$f"
        elif [[ ! "$f" =~ ^#.* ]]; then
            handle_dl "$f"
        fi
        sleep 0.1
    done < <(cat $DL_CONF_PATH)

    sleep 0.5 && wait_for_download

    info "\nDownloading music files : done."
}

#
# Perform some check relative to the binaries
# and the path used into the script
#
setup() {
    info "Running a few checks ..."

    debug "
    download path :          $DL_PATH
    log path :               $LOG_PATH
    lock directory path :    $LOCK_DIR
    download config file :   $DL_CONF_PATH
    youtube-dl config file : $YT_CONF_PATH
    dl mode :                $DL_MODE
    output mode :            $OUTPUT_MODE
    new target :             $NEW_TARGET
    show url :               $SHOW
    loglevel :               $LEVEL
"

    prgs=('scdl' 'youtube-dl' 'ffmpeg')
    for prg in "${prgs[@]}"
    do
        exit_if_not_installed $prg
    done

    # TODO: check range mode
    # TODO: check range loglevel

    check_if_dir_exist "$DL_PATH" "download root path"
    check_if_file_exist "$YT_CONF_PATH" "youtube-dl configuration file"
    check_if_file_exist "$DL_CONF_PATH" "download configuration file"

    if (find $SYNC_LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .); then
        error "Cannot dl while syncing"
        exit 4
    fi

    # FIXME: doesn't work ...
    # if (find $DL_LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .); then
    #     error "A dl process is locking the directory"
    #     exit 4
    # fi

    info "updating youtube-dl ..."
    sudo youtube-dl --update

    if [ ! -z "$NEW_TARGET" ]; then
        echo -e "$NEW_TARGET" >> $DL_CONF_PATH
        exit 0
    fi

    mkdir -p $LOCK_DIR
    mkdir -p $LOG_PATH
}

#
# main
#

# TODO: comment entry
# TODO: remove entry

while getopts "l:a:m:d:c:y:o:ish" o; do
    case "${o}" in
        l)
            LEVEL=${OPTARG}
	          ;;
        a)
            NEW_TARGET=${OPTARG}
            ;;
        m)
            DL_MODE=${OPTARG}
            ;;
        o)
            OUTPUT_MODE=${OPTARG}
            ;;
        d)
            DL_PATH=${OPTARG}
            ;;
        c)
            DL_CONF_PATH=${OPTARG}
            ;;
        y)
            YT_CONF_PATH=${OPTARG}
            ;;
        i)
            INSTALL=1
            ;;
        s)
            SHOW=1
            ;;
	      h)
	          usage "$USAGE"
            exit 0
	          ;;
	      *)
	          usage "$USAGE"
	          exit 1
	          ;;
    esac
done

if [ $INSTALL -eq 1 ]; then
    install_scdl && install_yt # && install_ffmpeg
    exit 0
fi

setup && run
