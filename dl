#!/bin/bash

# possible return value from the scirpt are :
# 0 : all ok ; 1 : cli opt ; 2 : required package are not present ; 3 : invalid path provided ; dl:  while sync

# fetch script path for import
# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

source $SCRIPTPATH/libs/sh_lib

# static value
LOG_PATH=$SCRIPTPATH/etc/logs/
LOCK_DIR=/tmp/music_dl/dl/
SYNC_LOCK_DIR=/tmp/music_dl/sync

# cli value
YT_CONF_PATH=$SCRIPTPATH/etc/youtube-dl.conf
DL_CONF_PATH=$SCRIPTPATH/etc/dl.conf
DL_PATH=$SCRIPTPATH/Music/
YT_DL_ARGS="--config-location $YT_CONF_PATH"
INSTALL=0
MODE=0

USAGE="
Usage : dl -d [path] -c [path] -y [path] -m [0..3] -l [0..3] -i -h

Run dl, a simple music downloader script.

Configuration options :

    -d:     root path for downloads. A full or relative path can be provide.
            Default : [$DL_PATH]
    -c:     download configuration file path. A full path must be provide.
            Default : [$DL_CONF_PATH]
    -y:     youtube-dl configuration file path. A full path must be provide.
            Default : [$YT_CONF_PATH]
    -m:     mode (0=all,1=youtube,2=soundcloud,3=disable_dl)
            Default : [$MODE]

Misc options :

    -l:     log level (0=error,1=info,2=warn,3=debug).
            Default : [$LEVEL]
    -i:     install required packages
    -h:     display this screen
"

#
# Installer functions
#

# install scdl if needed
install_scdl() {
    exit_if_not_installed "pip3"
    pip3 install scdl
    info "scdl (a soundcloud downloader) installed"
}
# install youtube-dl
install_yt() {
    exit_if_not_installed "curl"
    sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
    sudo chmod a+rx /usr/local/bin/youtube-dl
    info "youtube-dl (a youtube dowmloader) installed"
}

#
# Soundcloud dl functions
# They only use `echo` to facilitate loggin
#

# download playlists from soundcloud
download_from_sc_playlist() {
    local url=$1
    pwd && sleep 7
    # scdl -l "$url" -m -c --hide-progress --download-archive .scdl_playlist.txt;
}

# download likes from soundcloud
download_from_sc_like() {
    local url=$1
    pwd && sleep 7
    # scdl -l "$url" -f -c --hide-progress --download-archive .scdl_like.txt;
}

#
# YouTube function
# They only use `echo` to facilitate loggin
#

# download (playlist/track) from youtube
download_from_yt() {
    local url=$1
    # add dl archive per file
    pwd && sleep 10
    # youtube-dl $YT_DL_ARGS "$url"
}

#
# Global function
#

#
# Process the argument; create the dl dir;
# handle the log / flag file; run the dl
#
downloader() {

    local path=$1
    local url=$2

    local dl_path=$DL_PATH$path
    local log_file=$LOG_PATH$path

    touch $LOCK_DIR$path
    info "Downloading $path stuffs : running ..."

    mkdir -p "$dl_path"
    touch "$dl_path/.downloaded"

    cd "$dl_path"
    if [ `echo $url | grep "youtube"` ] && ( [ $MODE -eq 0 ] || [ $MODE -eq 1 ] ); then
        download_from_yt "$url" &> "$log_file".log
    elif [ `echo $url | grep "soundcloud"` ] && ( [ $MODE -eq 0 ] || [ $MODE -eq 2 ] ); then
        download_from_sc_like "$url" &> "$log_file"_like.log
        download_from_sc_playlist "$url" &> "$log_file"_playlist.log
    elif [ $MODE -eq 3 ]; then
             sleep 10 # sleep 10 for tesst
    else
        warn "url schema not supported (mode=$MODE) : $url"
    fi
    cd - > /dev/null

    debug "Downloading $path stuffs : done."
    rm $LOCK_DIR/$path
}

#
# Main logic function (checking - running - waiting)
#

#
# Wait for all download to be complete.
# All download are complete once the $LOCK_DIR/
# directory is empty
#
wait_for_download() {
    info "Waiting for downlaod to finish"
    while true
    do
        if ! (find $LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .); then
            break
        fi
        echo -n "."
        sleep 1
    done
}

#
# Read the download configuration file ;
# run the download if needed and then wait
# for all worker to finish
#
run() {
    info "Downloading music files : running ..."

    # make newlines the only separator
    local IFS=$'\n'

    while read f ; do
        debug "Processing $f"

        if [[ "$f" =~ ^#.* ]]; then
            warn "Entry ignored"
        else
            local path=`echo "$f" | cut -d ' ' -f1`
            local url=`echo "$f" | cut -d ' ' -f2`

            if [ -z "$url" ] || [ -z "$path" ]; then
                error "Invalid value in the download configuration file for ($path):[$url]"
                warn "Skipping"
            else
                downloader $path $url &
            fi
        fi
    done < <(cat $DL_CONF_PATH)

    sleep 1 && wait_for_download

    info "\nDownloading music files : done."
}

#
# Perform some check relative to the binaries
# and the path used into the script
#
setup() {
    info "Running a few checks ..."

    debug "
    download path :          $DL_PATH
    log path :               $LOG_PATH
    download config file :   $DL_CONF_PATH
    youtube-dl config file : $YT_CONF_PATH
    mode :                   $MODE
    loglevel :               $LEVEL
"

    prgs=('scdl' 'youtube-dl' 'ffmpeg')
    for prg in "${prgs[@]}"
    do
        exit_if_not_installed $prg
    done

    # TODO: check range mode
    # TODO: check range loglevel

    check_if_dir_exist "$DL_PATH" "download root path"
    check_if_file_exist "$YT_CONF_PATH" "youtube-dl configuration file"
    check_if_file_exist "$DL_CONF_PATH" "download configuration file"

    if (find $SYNC_LOCK_DIR/ -mindepth 1 -print -quit 2>/dev/null | grep -q .); then
        error "Cannot dl while syncing"
        exit 4
    fi

    mkdir -p $LOCK_DIR

    info "All okay let's process !"
}

#
# main
#

while getopts "l:m:d:c:y:ih" o; do
    case "${o}" in
        l)
            LEVEL=${OPTARG}
	          ;;
        m)
            MODE=${OPTARG}
            ;;
        d)
            DL_PATH=${OPTARG}
            ;;
        c)
            DL_CONF_PATH=${OPTARG}
            ;;
        y)
            YT_CONF_PATH=${OPTARG}
            ;;
        i)
            INSTALL=1
            ;;
	      h)
	          usage "$USAGE"
            exit 0
	          ;;
	      *)
	          usage "$USAGE"
	          exit 1
	          ;;
    esac
done

if [ $INSTALL -eq 1 ]; then
    install_scdl && install_yt # && install_ffmpeg
    exit 0
fi

YT_DL_ARGS="--config-location $YT_CONF_PATH"

setup && run
